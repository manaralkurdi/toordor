import 'dart:convert';
import 'dart:core';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:localize_and_translate/localize_and_translate.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:syncfusion_flutter_calendar/calendar.dart';
import 'package:toordor/model/bussnise_employee.dart';
import 'package:toordor/model/category_model.dart';
import 'package:toordor/model/login_model.dart';
import 'package:toordor/view/screen/add_project.dart';
import 'package:toordor/view/screen/home.dart';
import 'package:toordor/view/screen/my_business.dart';
import 'package:toordor/view/screen/my_employees.dart';
import 'package:toordor/view/screen/setting.dart';
import 'package:toordor/view/screen/show_employee.dart';
import 'package:toordor/view/screen/user_profile.dart';
import 'package:toordor/view/screen/time_workplace.dart';
import 'package:toordor/const/color.dart';
import 'package:http/http.dart' as http;
import 'package:toordor/const/new_url_links.dart';
import 'package:toordor/const/urlLinks.dart';
import 'package:toordor/view/screen/home_body_category.dart';
import '../View/Screen/create_account.dart';
import '../model/Autogenerated.dart';
import '../model/bussnise_profile.dart';
import '../model/employeeappointment.dart';
import '../model/services_bussnise.dart';
import '../view/screen/bussnise_profile.dart';
import '../view/screen/chang_password.dart';
import '../view/screen/logout_screen.dart';
import '../model/appointment_user.dart';
import '../model/employee_services.dart';
import '../model/services.dart';
import '../view/screen/login_screen.dart';
import '../view/screen/my_work_place.dart';
import '../view/screen/show_bussnise_appointment.dart';

class Controller {
 static String secret = "";
  static List<Pages> list = [
    Pages(title: 'الرئيسية'.tr(), page: HomeBodyCategory()),
    Pages(title: 'حسابي'.tr(), page: UserProFile()),
    // Pages(title: 'اعمالي', page: MyBusiness()),
    Pages(title: 'انشئ مشروعك الخاص'.tr(), page: AddProject()),
    Pages(title: 'اوقات العمل'.tr(), page: TimeWorkPlace()),
    // Pages(title: 'عروض التوظيف', page: MyEmployees()),
    Pages(title: 'طلبات التوظيف'.tr(), page: MyWorkPlace()),
    Pages(title: 'اعدادات '.tr(), page: SettingPage()),
    Pages(title: 'تسجيل الخروج'.tr(), page: Logout()),
  ];
  static List<Pages> listpagebussnise = [
    Pages(title: 'الرئيسية'.tr(), page: ShowBussniseAppointment()),
    Pages(title: 'حسابي'.tr(), page: BussniseProFile()),
    Pages(title: 'اعمالي'.tr(), page: MyBusiness()),
    // Pages(title: 'اوقات العمل ',  page: TimeWorkPlace( bussnise: 0,)),
    // Pages(title: 'طلبات التوظيف ', page: MyWorkPlace()),
    Pages(title: 'عروض التوظيف'.tr(), page: MyEmployees()),
    Pages(title: 'الموظفين'.tr(), page: ShowEmployee()),
    Pages(title: 'اعدادات '.tr(), page: SettingPage()),
    Pages(title: 'تسجيل الخروج'.tr(), page: Logout()),
  ];
  //
  // static Future<void> sendOTP(BuildContext context,
  //     {
  //       required String phone,
  //     }
  //
  //     ) async {
  //   http.Response response = await http.post(Uri.parse(ApiLinks.sendOTP),
  //       headers: {
  //     'Content-Type': 'application/json',
  //       'Accept': 'application/json'
  //       },
  //       body: json.encode({"number": phone}));
  //   print(response.body);
  //   print(phone);
  //   Map jsonData=json.decode(response.body);
  //   var data=json.decode(response.body);
  //   if (response.statusCode == 200&&jsonData['success']==true) {
  //     // ScaffoldMessenger.of(context).showSnackBar( SnackBar(
  //     //   content: Text('تم ارسال رساله تاكيد'.tr()),
  //     //   backgroundColor: Colors.green,
  //     // ),
  //     //);
  //   }
  //   else{
  //     // ScaffoldMessenger.of(context).showSnackBar( SnackBar(
  //     //   content: Text(data['message'].toString()),
  //     //   backgroundColor: Colors.grey,
  //     // ));
  //   }
  //
  // }

  static Future myBuisness(BuildContext context, {required int? id}) async {
    SharedPreferences preferences = await SharedPreferences.getInstance();
    String _token = preferences.getString('token') ?? '';

    Map<String, String> header = {
      "Content-Type": "application/json",
      'Accept': 'application/json',
      'Authorization': 'Bearer $_token',
    };
    http.Response response = await http
        .get(Uri.parse(ApiLinks.serviceIndex + '$id'), headers: header);
    if (response.statusCode == 200) {
      Map<String, dynamic> decodeData = json.decode(response.body);
      return decodeData;
    } else {}
  }

  static Future<dynamic> sendOTP(BuildContext context,
      {required String phone}) async {
    http.Response response = await http.post(Uri.parse(ApiLinks.sendOTPRegister),
        headers: {
          "Content-Type": "application/json",
          'Accept': 'application/json'
        },
        body: json.encode({'number': phone}));
    var decodeData = json.decode(response.body);
  //  var jsonData = json.decode(json.encode(response.body));
    print(decodeData['status']);
    if (response.statusCode == 200 &&
        decodeData['status'] == true) {
      print(json.decode(response.body));
      Navigator.push(context,
          MaterialPageRoute(builder: (context) => OTPScreen()));
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text('تم ارسال رساله تاكيد'.tr())));
      SharedPreferences preferences = await SharedPreferences.getInstance();
      print(decodeData['secret_key']);
      preferences.setString('secret_key', decodeData['secret_key'] ?? '');
      Controller.secret =decodeData['secret_key'].toString();
      print(Controller.secret);
      //    ScaffoldMessenger.of(context).showSnackBar( SnackBar(
      // content: Text('تم ارسال رساله تاكيد'.tr())));
      //  navigatorOff(context, const OTPScreen());
    } else {
      print(json.decode(response.body));
      // ScaffoldMessenger.of(context).showSnackBar( SnackBar(
      //     //   content: Text('تم ارسال رساله تاكيد'.tr()),
    }
    return decodeData;
  }

  static Future<void> sendOTPpassword(BuildContext context,
      {required String phone}) async {
    http.Response response = await http.post(Uri.parse(ApiLinks.sendOTP),
        headers: {
          "Content-Type": "application/json",
          'Accept': 'application/json'
        },
        body: json.encode({'number': phone}));

    var jsonData = json.decode(json.encode(response.body));
    print(jsonData);
    print(json.decode(json.encode(response.body)));
    if (response.statusCode == 200 ||
        jsonData['StatusDescription'] == "Success") {
      Navigator.push(context,
          MaterialPageRoute(builder: (context) => OTPScreenpassword()));
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text('تم ارسال رساله تاكيد'.tr())));
      //  navigatorOff(context, const OTPScreen());
    } else {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text(jsonData['message'])));
    }
    return jsonData;
  }

  static Future<void> verifyOTP(
      BuildContext context, {
        required String code,
      required String fullname,required String  userName,required
        String password, required String phoneNumber
      }) async {
    SharedPreferences preferences = await SharedPreferences.getInstance();
    String secert_key = preferences.getString("secert_key") ?? '';
    print(secert_key);
    http.Response response = await http.post(Uri.parse(ApiLinks.verifyOTPregister),
        headers: {
          "Content-Type": "application/json",
          'Accept': 'application/json'
        },

        body: json.encode({'code': code,"secret_key":Controller.secret}));
    var data = json.decode(response.body);
    print(data);
    if (response.statusCode == 200 && data['status'] == true) {
      await Controller.register(context,
          fullName: fullname,
          userName: userName,
          password: password,
          phone: phoneNumber);
      // String token=data['data']['token'];
      // await SharedPreferences.getInstance()..setString('token', token);
     // navigatorOff(context, LoginPage());
    }
    else{
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text("الرجاء التحقق من الكود".tr())));
    }
  }

  static Future<dynamic> sendOtp(BuildContext context,
      {required String phone
      }) async {
    http.Response response = await http.post(Uri.parse(ApiLinks.sendOTP),
        headers: {
          "Content-Type": "application/json",
          'Accept': 'application/json'
        },
        body: json.encode({'number': phone}));

    var jsonData = json.decode(json.encode(response.body));
    print(response.body);
    print(json.decode(json.encode(response.body)));
    if (response.statusCode == 200 ||
        jsonData['StatusDescription'] == "Success") {
      Navigator.push(context,
          MaterialPageRoute(builder: (context) => OTPScreen()));
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text('تم ارسال رساله تاكيد'.tr())));
      // Controller.register(context,
      //     phone: phone.toString(),
      //     password: password.toString(),
      //     userName: userName.toString(),
      //   fullName: fullname.toString(),
      // );
      // ScaffoldMessenger.of(context).showSnackBar(
      //     SnackBar(content: Text('تم انشاء حسابك بنجاح'.tr())));
      // navigatorOff(context,  OTPScreen());
      // Navigator.push(context,
      //     MaterialPageRoute(builder: (context) => LoginPage()));
      // ScaffoldMessenger.of(context)
      //     .showSnackBar(SnackBar(content: Text('تم ارسال رساله تاكيد'.tr())));
      //  navigatorOff(context, const OTPScreen());
    } else {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text(jsonData['message'].toString())));
    }
    return  jsonData;
  }

  static Future<void> restPassword(
    BuildContext context, {
    required String password,
    required String confiremPassword,
    required String phone,
  }) async {
    http.Response response = await http.post(Uri.parse(ApiLinks.resetPassword),
        headers: {
          "Content-Type": "application/json",
          'Accept': 'application/json'
        },
        body: json.encode({
          "phone": phone,
          "password": password,
          "password_confirmation": confiremPassword
        }));
    var data = json.decode(response.body);
    print(data.toString());
    if (response.statusCode == 200 && data['status'] == true) {
      // await Controller.register(context,
      //     fullName: fullname,
      //     userName: userName,
      //     password: password,
      //     phone: phoneNumber);
      // String token=data['data']['token'];
      // await SharedPreferences.getInstance()..setString('token', token);
      Navigator.pushReplacement(
          context, MaterialPageRoute(builder: (context) => LoginPage()));
      // navigatorOff(context, );
    } else {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text(data['message']['password'][0])));
      // ScaffoldMessenger.of(context)
      //  .showSnackBar(const SnackBar(content: Text('حدث خطأ ما!')));

    }
  }

  static Future<void> cancelBussnise(
    BuildContext context, {
    required String id,
  }) async {
    http.Response response = await http.post(Uri.parse(ApiLinks.resetPassword),
        headers: {
          "Content-Type": "application/json",
          'Accept': 'application/json'
        },
        body: json.encode({
          "id": id,
        }));
    var data = json.decode(response.body);
    print(data.toString());
    if (response.statusCode == 200 && data['status'] == true) {
      // await Controller.register(context,
      //     fullName: fullname,
      //     userName: userName,
      //     password: password,
      //     phone: phoneNumber);
      // String token=data['data']['token'];
      // await SharedPreferences.getInstance()..setString('token', token);
      Navigator.pushReplacement(context,
          MaterialPageRoute(builder: (context) => ShowBussniseAppointment()));
      // navigatorOff(context, );
    } else {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text(data['message'])));
      // ScaffoldMessenger.of(context)
      //  .showSnackBar(const SnackBar(content: Text('حدث خطأ ما!')));

    }
  }


  static Future<void> verifyOTPpassword(BuildContext context,
      {required String code}) async {
    http.Response response = await http.post(Uri.parse(ApiLinks.verifyOTP),
        headers: {
          "Content-Type": "application/json",
          'Accept': 'application/json'
        },
        body: json.encode({'code': code}));
    var data = json.decode(response.body);
    if (response.statusCode == 200 && data['status'] == true) {
      String token = data['data']['token'];
      await SharedPreferences.getInstance()
        ..setString('token', token);
      navigatorOff(context, ChangePassword());
    } else {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text(data['message'])));
    }
  }

  static Future<List<AppointmentUser>> userAppointment(
      BuildContext context) async {
    String _token = await SharedPreferences.getInstance()
        .then((value) => value.getString('token') ?? '');
    // String id = await SharedPreferences.getInstance()
    //     .then((value) => value.getString('id') ?? '');
    // String username = await SharedPreferences.getInstance()
    //     .then((value) => value.getString('username') ?? '');
    // print(username);

    Map<String, String> header = {
      "Content-Type": "application/json",
      'Accept': 'application/json',
      'Authorization': 'Bearer $_token',
    };
    List<AppointmentUser> list = [];
    http.Response response =
        await http.get(Uri.parse(ApiLinks.userAppoinment), headers: header);
    if (response.statusCode == 200) {
      var decodeData = json.decode(response.body);
      print(response.body);
      for (var i in decodeData['message']) {
        list.add(AppointmentUser.fromJson(i));
      }
      return list;
    } else {
      return [];
    }
  }

  static Future <dynamic>userData(BuildContext context) async {
    String _token = await SharedPreferences.getInstance()
        .then((value) => value.getString('token') ?? '');
    // String id = await SharedPreferences.getInstance()

    //     .then((value) => value.getString('id') ?? '');
    // String username = await SharedPreferences.getInstance()
    //     .then((value) => value.getString('username') ?? '');
    // print(username);

    Map<String, String> header = {
      "Content-Type": "application/json",
      'Accept': 'application/json',
      'Authorization': 'Bearer $_token',
    };

    http.Response response =
        await http.get(Uri.parse(ApiLinks.user), headers: header);
    var decodeData = json.decode(response.body);
    if (response.statusCode == 200) {
      print(response.body);
      print(response.statusCode);
      print(response.body);
      print(response.statusCode);
      print(decodeData['message']['has_bussinees'].toString());
      SharedPreferences preferences = await SharedPreferences.getInstance();
      preferences.setBool(
          'has_bussinees', decodeData['message']['has_bussinees'] ?? false);
      preferences.setBool(
          'is_employee', decodeData['message']['is_employee'] ?? false);
      if (decodeData['message']['employee_id'] != null) {
        preferences.setInt(
            'employee_id', decodeData['message']['employee_id'] ?? -1);
      }

      //  preferences.setInt('business_id', decodeData['message']['has_bussinees']!);
      var bussniseid = decodeData['message']['has_bussinees'];
      await SharedPreferences.getInstance()
          .then((value) => value.setBool('bussnisse_id', bussniseid) ?? false);
      print(response.body);
      return decodeData;
    }
  }

  static Future<dynamic> getAppointments(
    BuildContext context, {
    required dynamic businessId,
    required dynamic employeeId,
    required String date,
    required String serviceid,
    required String fromDate,
    required String toDate,
    required TextEditingController comment,
  }) async {
    String _token = await SharedPreferences.getInstance()
        .then((value) => value.getString('token') ?? '');
    Map<String, String> header = {
      "Content-Type": "application/json",
      'Accept': 'application/json',
      'Authorization': 'Bearer $_token',
    };
    http.Response response = await http.post(Uri.parse(ApiLinks.book),
        headers: header,
        body: json.encode({
          "businees_id": businessId,
          "employee_id": employeeId,
          "service_id": serviceid,
          "date": date,
          "from_date": fromDate,
          "to_date": toDate,
          "comment": comment.text,
        }));
    print(response.body);
    var jsonData = json.decode(response.body);
    if (response.statusCode == 200 &&jsonData['success']==true&&jsonData['message'] !=
        "There is appointment in this time") {
      print(jsonData);
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text('تم حجز الموعد'.tr())));
      Navigator.pop(context);
    } else {
      Navigator.pop(context);
      ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(jsonData['message'])));
    }
  }

  static Future<dynamic> getBussnisebyid(
    BuildContext context, {
    required int businessId,
  }) async {
    String _token = await SharedPreferences.getInstance()
        .then((value) => value.getString('token') ?? '');
    Map<String, String> header = {
      "Content-Type": "application/json",
      'Accept': 'application/json',
      'Authorization': 'Bearer $_token',
    };
    http.Response response = await http.post(Uri.parse(ApiLinks.busineesGet),
        headers: header,
        body: jsonEncode({
          "businees_id": businessId,
        }));
    if (response.statusCode == 200) {
      var jsonData = json.decode(response.body);
      print(jsonData);
      return jsonData;

      //sBussniseProfileModel.fromJson(jsonData);
    } else {
      print("faild");
    }
  }

 static Future<void> bookAvilableMonth(BuildContext context,
     {required dynamic service_id, required int bussniseID,required String employee_id}) async {
   String _token = await SharedPreferences.getInstance()
       .then((value) => value.getString('token') ?? '');
   Map<String, String> header = {
     "Content-Type": "application/json",
     'Accept': 'application/json',
     'Authorization': 'Bearer $_token',
   };
   http.Response response = await http.post(
       Uri.parse(ApiLinks.bookMonth),
       headers: header,
       body: jsonEncode({"service_id": service_id,
         "businees_id": bussniseID,"employee_id":employee_id}));
   if (response.statusCode == 200) {
     ScaffoldMessenger.of(context)
         .showSnackBar(SnackBar(content: Text('تم اضافتك كموظف'.tr())));
     Navigator.push(
       context,
       MaterialPageRoute(builder: (context) => TimeWorkPlace()),
     );
   } else {
     print(response.body);
     ScaffoldMessenger.of(context)
         .showSnackBar(SnackBar(content: Text("تم اضافتك كموظف".tr())));
   }
 }


 static Future<void> AccseptrequestfromBussnise(BuildContext context,
      {required dynamic requestid, required int bussniseID}) async {
    String _token = await SharedPreferences.getInstance()
        .then((value) => value.getString('token') ?? '');
    Map<String, String> header = {
      "Content-Type": "application/json",
      'Accept': 'application/json',
      'Authorization': 'Bearer $_token',
    };
    http.Response response = await http.post(
        Uri.parse(ApiLinks.acceptRequestuser),
        headers: header,
        body: jsonEncode({"request_id": requestid, "businees_id": bussniseID}));
    if (response.statusCode == 200) {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text('تم اضافتك كموظف'.tr())));
      Navigator.push(
        context,
        MaterialPageRoute(builder: (context) => TimeWorkPlace()),
      );
    } else {
      print(response.body);
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text("تم اضافتك كموظف".tr())));
    }
  }

 static Future<void> avilableBook(BuildContext context,
     {required dynamic service_id, required int bussniseID,required int employeeId,required String date}) async {
   String _token = await SharedPreferences.getInstance()
       .then((value) => value.getString('token') ?? '');
   Map<String, String> header = {
     "Content-Type": "application/json",
     'Accept': 'application/json',
     'Authorization': 'Bearer $_token',
   };
   http.Response response = await http.post(
       Uri.parse(ApiLinks.bookAvilableAndNot),
       headers: header,
       body: jsonEncode({
         "service_id": service_id,
         "businees_id": bussniseID,
         "date": date,
         "employee_id": employeeId

       }));
   if (response.statusCode == 200) {
     ScaffoldMessenger.of(context)
         .showSnackBar(SnackBar(content: Text('تم اضافتك كموظف'.tr())));
     Navigator.push(
       context,
       MaterialPageRoute(builder: (context) => TimeWorkPlace()),
     );
   } else {
     print(response.body);
     ScaffoldMessenger.of(context)
         .showSnackBar(SnackBar(content: Text("تم اضافتك كموظف".tr())));
   }
 }

  static Future<void> cancelRequestBussnise(
    BuildContext context, {
    required dynamic requestid,
  }) async {
    String _token = await SharedPreferences.getInstance()
        .then((value) => value.getString('token') ?? '');
    Map<String, String> header = {
      "Content-Type": "application/json",
      'Accept': 'application/json',
      'Authorization': 'Bearer $_token',
    };
    http.Response response =
        await http.post(Uri.parse(ApiLinks.cancelRequestuser),
            headers: header,
            body: jsonEncode({
              "request_id": requestid,
            }));
    if (response.statusCode == 200) {
      var jsonData = json.decode(response.body);
      print(response.body);
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text('تم الغاء الطلب  '.tr())));
      return jsonData;
    } else {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text('تم الغاء الطلب  '.tr())));
      // ScaffoldMessenger.of(context)
      //     .showSnackBar(SnackBar(content: Text(response.body)));
    }
  }


  static Future<List<ServicesIndexOfbussnise>> servicesIndex(
      BuildContext context, String bussniseId) async {
    String _token = await SharedPreferences.getInstance()
        .then((value) => value.getString('token') ?? '');
    // String id = await SharedPreferences.getInstance()
    //     .then((value) => value.getString('id') ?? '');
    // String username = await SharedPreferences.getInstance()
    //     .then((value) => value.getString('username') ?? '');
    // print(username);

    Map<String, String> header = {
      "Content-Type": "application/json",
      'Accept': 'application/json',
      'Authorization': 'Bearer $_token',
    };

    http.Response response = await http
        .get(Uri.parse(ApiLinks.serviceIndex + bussniseId), headers: header);
    List<ServicesIndexOfbussnise> serviceindex = [];
    if (response.statusCode == 200) {
      var data = json.decode(response.body);
      print(response.body);
      List rest = data["data"];
      for (var i in rest) {
        serviceindex.add(ServicesIndexOfbussnise.fromJson(i));
      }
      // var error = data['error'];

      return serviceindex;
    } else {
      print(response.body);
      return serviceindex;
    }
    return serviceindex;

    // var decodeData = json.decode(response.body);
    //0
    // serviceindex.add(
    //     ServicesIndexOfbussnise.fromJson(decodeData['data'])
    // );
    // return serviceindex;
  }



  static Future<List<ServicesEmployee>> servicesEmployee(
      BuildContext context, String employeeId) async {
    String _token = await SharedPreferences.getInstance()
        .then((value) => value.getString('token') ?? '');
    // String id = await SharedPreferences.getInstance()
    //     .then((value) => value.getString('id') ?? '');
    // String username = await SharedPreferences.getInstance()
    //     .then((value) => value.getString('username') ?? '');
    // print(username);

    Map<String, String> header = {
      "Content-Type": "application/json",
      'Accept': 'application/json',
      'Authorization': 'Bearer $_token',
    };
    print(_token);
    http.Response response = await http
        .get(Uri.parse(ApiLinks.serviceEmploy + employeeId), headers: header);

    List<ServicesEmployee> serviceEmployee = [];
    if (response.statusCode == 200) {
      var data = json.decode(response.body);
      List rest = data['message']["data"];
      // var error = data['error'];
      serviceEmployee = rest
          .map<ServicesEmployee>((json) => ServicesEmployee.fromJson(json))
          .toList();
      print(data);
    } else {
      return serviceEmployee;
    }
    return serviceEmployee;

    // var decodeData = json.decode(response.body);
    //
    // serviceindex.add(
    //     ServicesIndexOfbussnise.fromJson(decodeData['data'])
    // );
    // return serviceindex;
  }

  static Future BussniseEdit(
    BuildContext context, {
    required TextEditingController fulname,
    required TextEditingController phone,
    required TextEditingController city,
    required TextEditingController name,
    required TextEditingController country,
  }) async {
    String _token = await SharedPreferences.getInstance()
        .then((value) => value.getString('token') ?? '');
    // String id = await SharedPreferences.getInstance()
    //     .then((value) => value.getString('id') ?? '');
    // String username = await SharedPreferences.getInstance()
    //     .then((value) => value.getString('username') ?? '');
    // print(username);

    Map<String, String> header = {
      "Content-Type": "application/json",
      'Accept': 'application/json',
      'Authorization': 'Bearer $_token',
    };

    http.Response response = await http.post(Uri.parse(ApiLinks.editUser),
        headers: header,
        body: jsonEncode({
          "fullname": fulname.text,
          "username": name.text,
          "phone": phone.text,
          "country_id": country.text,
          "city_id": city.text,
        }));
    if (response.statusCode == 200) {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text('تم تعديل البيانات '.tr())));

      Navigator.pop(context);
    } else {
      // ScaffoldMessenger.of(context)
      //     .showSnackBar(const SnackBar(content: Text('حدث خطأ ما!')));
    }
  }

  static Future DataEditBussnise(
    BuildContext context, {
    required TextEditingController email,
    required TextEditingController phone,
    required String to,
    required TextEditingController name,
    required String from,
    required TextEditingController specilize,
  }) async {
    String _token = await SharedPreferences.getInstance()
        .then((value) => value.getString('token') ?? '');
// String id = await SharedPreferences.getInstance()
//     .then((value) => value.getString('id') ?? '');
// String username = await SharedPreferences.getInstance()
//     .then((value) => value.getString('username') ?? '');
// print(username);

    Map<String, String> header = {
      "Content-Type": "application/json",
      'Accept': 'application/json',
      'Authorization': 'Bearer $_token',
    };

    http.Response response = await http.post(Uri.parse(ApiLinks.busineesupdate),
        headers: header,
        body: jsonEncode({
          "email": email.text,
          "business_name": name.text,
          "phone": phone.text,
          "from_date": to,
          "to_date": from,
          "specialization": specilize.text,
        }));
    print(response.body);
    if (response.statusCode == 200) {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text('تم تعديل البيانات '.tr())));
    } else {}
  }

  static Future userDataEdit(
    BuildContext context, {
    required TextEditingController fulname,
    required TextEditingController phone,
    required TextEditingController city,
    required TextEditingController name,
    required TextEditingController country,
  }) async {
    String _token = await SharedPreferences.getInstance()
        .then((value) => value.getString('token') ?? '');
    // String id = await SharedPreferences.getInstance()
    //     .then((value) => value.getString('id') ?? '');
    // String username = await SharedPreferences.getInstance()
    //     .then((value) => value.getString('username') ?? '');
    // print(username);

    Map<String, String> header = {
      "Content-Type": "application/json",
      'Accept': 'application/json',
      'Authorization': 'Bearer $_token',
    };

    http.Response response = await http.post(Uri.parse(ApiLinks.editUser),
        headers: header,
        body: jsonEncode({
          "fullname": fulname.text,
          "username": name.text,
          "phone": phone.text,
          "country_id": country.text,
          "city_id": city.text,
        }));
    if (response.statusCode == 200) {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text('تم تعديل البيانات '.tr())));

      Navigator.pop(context);
    } else {
      // ScaffoldMessenger.of(context)
      //     .showSnackBar(const SnackBar(content: Text('حدث خطأ ما!')));
    }
  }

  static Future<dynamic> employeeApointement(
    BuildContext context, {
    required int employeeid,
  }) async {
    String _token = await SharedPreferences.getInstance()
        .then((value) => value.getString('token') ?? '');
    // String id = await SharedPreferences.getInstance()
    //     .then((value) => value.getString('id') ?? '');
    // String username = await SharedPreferences.getInstance()
    //     .then((value) => value.getString('username') ?? '');
    // print(username);

    Map<String, String> header = {
      "Content-Type": "application/json",
      'Accept': 'application/json',
      'Authorization': 'Bearer $_token',
    };

    http.Response response =
        await http.post(Uri.parse(ApiLinks.employeeAppointments),
            headers: header,
            body: json.encode({
              "employee_id": employeeid,
            }));
    var jsonDecode = json.decode(response.body);
    print(response.body);
    if (response.statusCode == 200) {
      Controller.userData(context);
      return jsonDecode;
    } else {
      print("ffff");
    }
  }

  static Future workHoursEmployee(BuildContext context,
      {required int bussniseid,
      required String fromdate,
      required String todate,
      required String fromdatebreak,
      required String todatebreak,
      required int employeeid,
      required int service_id,
      required String weekend}) async {
    String _token = await SharedPreferences.getInstance()
        .then((value) => value.getString('token') ?? '');
    Map<String, String> header = {
      "Content-Type": "application/json",
      'Accept': 'application/json',
      'Authorization': 'Bearer $_token',
    };
    print(_token);
    http.Response response =
        await http.post(Uri.parse(ApiLinks.employeeCreateWorkHours),
            headers: header,
            body: json.encode({
              "businees_id": bussniseid,
              "employee_id": employeeid,
              "from_date": fromdate,
              "to_date": todate,
              "service_id": service_id,
              "break_from": fromdatebreak,
              "break_to": todatebreak,
              "weekends": weekend,
            }));
    print(response.statusCode);
    print(response.body);
    if (response.statusCode == 200) {
      var jsonData = json.decode(response.body);
      print(jsonData);
      print("تمت الاضافه بنجاح".tr());
      Navigator.pop(context);
      return jsonData;
    } else {
      print(response.body);
    }
  }

  Future insertBusiness(BuildContext context,
      {required String phoneNumber,
      required String nameProject,
      required String specialization,
      required String email,
      String? country,
      String? city,
      required String fromt,
      required String tot,
      required int id,
      required String weekend}) async {
    String _token = await SharedPreferences.getInstance()
        .then((value) => value.getString('token') ?? '');

    Map<String, String> header = {
      "Content-Type": "application/json",
      'Accept': 'application/json',
      'Authorization': 'Bearer $_token',
    };
    print(_token);
    Uri uri = Uri.parse(ApiLinks.busineesCreate);

    http.Response response = await http.post(uri,
        headers: header,
        body: json.encode({
          "business_name": nameProject,
          "phone": phoneNumber,
          "email": email,
          "specialization": specialization,
          "weekends": weekend,
          "from_date": fromt,
          "to_date": tot,
          "country_id": country,
          "city_id": 2,
          "category_id": id
        }));
    print(response.body);
    print(fromt);
    print(fromt);
    var data = json.decode(response.body);
    if (data["error"] == true) {
      final snackBar = SnackBar(
          content: Text("${data['message']} "), backgroundColor: Colors.red);
      return ScaffoldMessenger.of(context).showSnackBar(snackBar); //
      // ScaffoldMessenger.of(context).showSnackBar( SnackBar(
      //   content: Text('الرجاءالتحقق من المعلومات '.tr()),
      //   backgroundColor: Colors.green,
      // ),

    } else {
      Controller.userData(context);
      late SharedPreferences prefs;
      bool bussniseid = false;
      // Controller.userData(context);
      // prefs = await SharedPreferences.getInstance();
      // bussniseid = prefs.getBool('bussnisse_id') ?? false;
      // print("bussniseid");
      // print(bussniseid);
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text('تمت الاضافة بنجاح'.tr())));
      Controller.navigatorGo(context, LoginPage());
    }
  }

  Future fetchBusiRequists() async {
    String _token = await SharedPreferences.getInstance()
        .then((value) => value.getString('token') ?? '');
    http.Response response =
        await http.get(Uri.parse(getAllBusiRequists), headers: {
      "Content-Type": "application/json",
      'Accept': 'application/json',
      'Authorization': 'Bearer $_token',
    });
  }

  static Future<List<BussniseEmployes>> BussniseEmployee(
      BuildContext context) async {
    String _token = await SharedPreferences.getInstance()
        .then((value) => value.getString('token') ?? '');
    // String id = await SharedPreferences.getInstance()
    //     .then((value) => value.getString('id') ?? '');
    // String username = await SharedPreferences.getInstance()
    //     .then((value) => value.getString('username') ?? '');
    // print(username);

    Map<String, String> header = {
      "Content-Type": "application/json",
      'Accept': 'application/json',
      'Authorization': 'Bearer $_token',
    };

    http.Response response =
        await http.get(Uri.parse(ApiLinks.busineesEmployees), headers: header);
    List<BussniseEmployes> serviceindex = [];
    if (response.statusCode == 200) {
      Map<String, dynamic> data = json.decode(response.body);
      BussniseEmployes bussniseemployes = BussniseEmployes.fromJson(data);
      var data1 = json.decode(response.body);
      var rest = data1["message"] as List;
      // var error = data['error'];
      serviceindex = rest
          .map<BussniseEmployes>((json) => BussniseEmployes.fromJson(json))
          .toList();
      return serviceindex;
    } else {
      return serviceindex;
    }
    return serviceindex;

    // var decodeData = json.decode(response.body);
    //
    // serviceindex.add(
    //     ServicesIndexOfbussnise.fromJson(decodeData['data'])
    // );
    // return serviceindex;
  }

  static Future userMessage(BuildContext context) async {
    String _token = await SharedPreferences.getInstance()
        .then((value) => value.getString('token') ?? '');
    String id = await SharedPreferences.getInstance()
        .then((value) => value.getString('id') ?? '');
    http.Response response =
        await http.get(Uri.parse(ApiLinks.userMessage), headers: {
      "Content-Type": "application/json",
      'Accept': 'application/json',
      'Authorization': 'Bearer $_token',
    });
    print(response.body);
    if (response.statusCode == 200) {
      var decodeData = json.decode(response.body);
      return decodeData;
    } else {
      // ScaffoldMessenger.of(context)
      //     .showSnackBar(const SnackBar(content: Text('حدث خطا ما')));
    }
  }

  static Future getServiceEmployee(BuildContext context) async {
    String _token = await SharedPreferences.getInstance()
        .then((value) => value.getString('token') ?? '');
    String id = await SharedPreferences.getInstance()
        .then((value) => value.getString('id') ?? '');
    http.Response response = await http
        .get(Uri.parse(ApiLinks.getServicesEmployees + '?uID=$id'), headers: {
      "Content-Type": "application/json",
      'Accept': 'application/json',
      'Authorization': 'Bearer $_token',
    });
    if (response.statusCode == 200) {
      var decodeData = json.decode(response.body);
      return decodeData;
    } else {
      // ScaffoldMessenger.of(context)
      //     .showSnackBar(const SnackBar(content: Text('حدث خطا ما')));
    }
  }

  static Future<List<Message>> getServiceEmployeeAccept(
      BuildContext context) async {
    String _token = await SharedPreferences.getInstance()
        .then((value) => value.getString('token') ?? '');
    http.Response response = await http
        .get(Uri.parse(ApiLinks.getListFromAccseptEmployee), headers: {
      "Content-Type": "application/json",
      'Accept': 'application/json',
      'Authorization': 'Bearer $_token',
    });

    List<Message> list = [];
    var decodeData = json.decode(response.body);
    print(decodeData);
    if (response.statusCode == 200) {
      var data = json.decode(response.body);
      print(response.body);
      List rest = data["message"];
      for (var i in rest) {
        list.add(Message.fromJson(i));
      }
      // var error = data['error'];

      return list;
    } else {
      print(response.body);
      return list;
    }
    if (response.statusCode == 200) {
      Map<String, dynamic> data = json.decode(response.body);
      Service bussniseemployes = Service.fromJson(data);
      // var data1 = json.decode(response.body);
      // var rest = data1["message"] as List;
      // // var error = data['error'];
      // serviceindex = rest
      //     .map<BussniseEmployes>(
      //         (json) => BussniseEmployes.fromJson(json))
      //     .toList();
      var decodeData = json.decode(response.body);
      for (var i in decodeData['message']) {
        list.add(Message.fromJson(i));
      }
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text(decodeData['message'])));
      return list;
      // var decodeData = json.decode(response.body);
      // return decodeData;
    } else {
      return [];
      // ScaffoldMessenger.of(context)
      //     .showSnackBar(const SnackBar(content: Text('حدث خطا ما')));

    }
  }

  // static Future fetchTreatsTypes(BuildContext context) async {
  //   String _token = await SharedPreferences.getInstance()
  //       .then((value) => value.getString('token') ?? '');
  //   String id = await SharedPreferences.getInstance()
  //       .then((value) => value.getString('id') ?? '');
  //   http.Response response =
  //       await http.get(Uri.parse(getUsrTreatsTypes + '?uID=$id'), headers: {
  //     "Content-Type": "application/json",
  //     'Accept': 'application/json',
  //     'Authorization': 'Bearer $_token',
  //   });
  //   if (response.statusCode == 200) {
  //     var decodeData = json.decode(response.body);
  //     return decodeData;
  //   } else {
  //     ScaffoldMessenger.of(context)
  //         .showSnackBar(const SnackBar(content: Text('حدث خطا ما')));
  //   }
  // }

  static Future queryTreatsTypes(BuildContext context,
      {required String query}) async {
    String _token = await SharedPreferences.getInstance()
        .then((value) => value.getString('token') ?? '');
    String id = await SharedPreferences.getInstance()
        .then((value) => value.getString('id') ?? '');
    http.Response response =
        await http.get(Uri.parse(getUsrTreatsTypes + "uid= $id"), headers: {
      "Content-Type": "application/json",
      'Accept': 'application/json',
      'Authorization': 'Bearer $_token',
    });
    if (response.statusCode == 200) {
      var decodeData = json.decode(response.body);

      return decodeData;
    } else {
      // ScaffoldMessenger.of(context).showSnackBar(SnackBar(
      //     content: Text('حدث خطا ما' + response.statusCode.toString())));
    }
  }

  Future updateUserTreatsTypes() async {
    String _token = await SharedPreferences.getInstance()
        .then((value) => value.getString('token') ?? '');
    http.Response response = await http.post(Uri.parse(updateUsrTreatsTypes),
        headers: {
          "Content-Type": "application/json",
          'Accept': 'application/json',
          'Authorization': 'Bearer $_token',
        },
        body: json.encode({
          "baseSecurityParam": {"userKey": 0, "orgKey": 0, "roleKey": 0},
          "currentState": 0,
          "sortExpression": "string",
          "totalRecord": 0,
          "pageSize": 0,
          "currentPage": 0,
          "rowNumber": 0,
          "returnKey": 0,
          "uTTID": 0,
          "bID": 0,
          "uID": 0,
          "treatmentType": "string",
          "trtLenght": 0,
          "trtPrice": 0,
          "msg4Users": "string",
          "isActive1": true
        }));
  }

  static Future<dynamic> createNewService(
    BuildContext context, {
    required String sevicename,
    required String duration,
  }) async {
    String _token = await SharedPreferences.getInstance()
        .then((value) => value.getString('token') ?? '');
    String id = await SharedPreferences.getInstance()
        .then((value) => value.getString('id') ?? '');
    http.Response response = await http.post(
        Uri.parse(ApiLinks.createNewServices),
        headers: {
          "Content-Type": "application/json",
          'Accept': 'application/json',
          'Authorization': 'Bearer $_token',
        },
        body: json.encode({"service_name": sevicename, "duration": duration}));
    var decodeData = json.decode(response.body);
    print(response.body);
    print(response.statusCode);
    if (response.statusCode == 200) {
      ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('تمت اضافه الخدمة بنجاح'.tr())));
      return decodeData;
    } else {
      print(response.body);
    }
  }

  static Future<List<ServicesBussnise>> ServicesBussnises(
    BuildContext context, {
    required int bussniseid,
  }) async {
    String _token = await SharedPreferences.getInstance()
        .then((value) => value.getString('token') ?? '');
    http.Response response =
        await http.post(Uri.parse(ApiLinks.busineesServices),
            headers: {
              "Content-Type": "application/json",
              'Accept': 'application/json',
              'Authorization': 'Bearer $_token',
            },
            body: json.encode({
              "businees_id": bussniseid,
            }));

    List<ServicesBussnise> list = [];
    if (response.statusCode == 200) {
      var decodeData = json.decode(response.body);
      var data = json.decode(response.body);
      var rest = data["message"] as List;
      print(rest);
      list = rest
          .map<ServicesBussnise>((json) => ServicesBussnise.fromJson(json))
          .toList();
      return list;
    }
    // print("List Size: ${list.length}");
    // for (var i in decodeData['message']) {
    //   list.add(ServicesBussnise.fromJson(i));
    //
    // }
    // return list;
    else {
      // ScaffoldMessenger.of(context).showSnackBar(SnackBar(
      //     content: Text('حدث خطا ما' + response.statusCode.toString())));
      return list;
    }
  }

  static Future<dynamic> bussnisesCancel(
    BuildContext context, {
    required String id,
  }) async {
    String _token = await SharedPreferences.getInstance()
        .then((value) => value.getString('token') ?? '');
    http.Response response =
        await http.post(Uri.parse(ApiLinks.busineesAppointmentsCancel),
            headers: {
              "Content-Type": "application/json",
              'Accept': 'application/json',
              'Authorization': 'Bearer $_token',
            },
            body: json.encode({
              "id": id,
            }));

    var decodeData = json.decode(response.body);
    if (response.statusCode == 200 && decodeData['success'] == true) {
      print(decodeData);

      return decodeData;
    }
    // print("List Size: ${list.length}");
    // for (var i in decodeData['message']) {
    //   list.add(ServicesBussnise.fromJson(i));
    //
    // }
    // return list;
    else {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(
          content: Text('حدث خطا ما' + response.statusCode.toString())));
    }
  }

  static Future<dynamic> deleteAccount(
    BuildContext context,
  ) async {
    String _token = await SharedPreferences.getInstance()
        .then((value) => value.getString('token') ?? '');
    http.Response response = await http.delete(
      Uri.parse(ApiLinks.deleteAccount),
      headers: {
        "Content-Type": "application/json",
        'Accept': 'application/json',
        'Authorization': 'Bearer $_token',
      },
    );
    var decodeData = json.decode(response.body);
    print(decodeData);
    if (response.statusCode == 200 && decodeData["status"] == true) {
      navigatorGo(context, LoginPage());
      return decodeData;
    }
    // print("List Size: ${list.length}");
    // for (var i in decodeData['message']) {
    //   list.add(ServicesBussnise.fromJson(i));
    //
    // }
    // return list;
    else {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(
          content: Text('حدث خطا ما' + response.statusCode.toString())));
    }
  }

  static Future<List<CategoryModel>> categoryy(
    BuildContext context,
  ) async {
    String _token = await SharedPreferences.getInstance()
        .then((value) => value.getString('token') ?? '');

    http.Response response =
        await http.get(Uri.parse(ApiLinks.index), headers: {
      "Content-Type": "application/json",
      'Accept': 'application/json',
      'Authorization': 'Bearer $_token',
    });
    print(response.body);
    List<CategoryModel> list = [];
    if (response.statusCode == 200) {
      var decodeData = json.decode(response.body);

      for (var i in decodeData['data']) {
        list.add(CategoryModel.fromJson(i));
      }

      return list;
      //  return decodeData;
    } else {
      return list;
    }
  }

  static Future query(BuildContext context, {String? query}) async {
    String _token = await SharedPreferences.getInstance()
        .then((value) => value.getString('token') ?? '');
    Uri uri = Uri.parse(ApiLinks.search);
    List list = [];
    uri.replace(queryParameters: {'phone': query});
    http.Response response = await http.get(
      uri,
      headers: {
        "Content-Type": "application/json",
        'Accept': 'application/json',
        'Authorization': 'Bearer $_token',
        "callMethod": "DOCTOR_AVAILABILITY"
      },
    );
    if (response.statusCode == 200) {
      Map decodedData = json.decode(response.body);
      decodedData.forEach((key, value) => list.add(value));
    } else {
      print('api error');
    }
    return list;
    // list=await decodedData;
  }

  showEmployee(BuildContext context) {
    empolyee({required int index}) => Text('empolyee $index');
    showDialog(
        context: context,
        builder: (context) => CupertinoAlertDialog(
              content: GridView.builder(
                  itemCount: 3,
                  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                      crossAxisCount: 2),
                  itemBuilder: (context, index) => empolyee(index: index)),
            ));
  }

  TimeOfDay selectedTime = TimeOfDay.now();

  Future<void> login(BuildContext context,
      {required String phone, required String password}) async {
    showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) => const Center(
              child: CupertinoAlertDialog(
                content: CupertinoActivityIndicator(),
              ),
            ));
    http.Response response = await http.post(Uri.parse(ApiLinks.login),
        body: json.encode({"phone": phone, "password": password}),
        headers: {"Content-Type": "application/json"});
    Map<String, dynamic> data = json.decode(response.body);
    LoginResponse loginResponse = LoginResponse.fromJson(data);
    if (response.statusCode == 200) {
      if (loginResponse.success == true) {
        print('token = ${loginResponse.data!.token}');
        SharedPreferences preferences = await SharedPreferences.getInstance();
        preferences.clear();
        preferences.setString('token', loginResponse.data!.token ?? '');
        preferences.setBool(
            'is_employee', loginResponse.data!.is_employee ?? false);
        preferences.setBool(
            'has_bussinees', loginResponse.data!.has_bussinees ?? false);

        print(loginResponse.data?.token);
        preferences.setString('fullname', loginResponse.data!.fullname ?? '');
        Controller.userData(context);
        late SharedPreferences prefs;
        bool bussniseid = false;
        prefs = await SharedPreferences.getInstance();
        bussniseid = prefs.getBool('has_bussinees') ?? false;
        print("bussniseid");
        print(bussniseid);
        if (bussniseid == false) {
          Navigator.pushReplacement(context,
              MaterialPageRoute(builder: (context) => HomeBodyCategory()));
        } else {
          Navigator.pushReplacement(
              context,
              MaterialPageRoute(
                  builder: (context) => ShowBussniseAppointment()));
        }
      } else if (loginResponse.success == false) {
        print(loginResponse.message);
        print("00000");
        Navigator.pop(context);
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(
            content:
                Text('يرجي التاكد من كتابة اسم المستخدم وكلمة المرور'.tr())));
      }
    } else {
      print("00000");
      ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('يرجى التاكد من المعلومات '.tr())));
    }
  }

  static Future<void> register(BuildContext context,
      {required String phone,
      required String password,
      required String fullName,
      required String userName}) async {
    http.Response response = await http.post(Uri.parse(ApiLinks.register),
        body: json.encode({
          "phone": phone,
          "password": password,
          "fullname": fullName,
          "username": userName
        }),
        headers: {"Content-Type": "application/json"});
    showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) => const Center(
              child: CupertinoAlertDialog(
                content: CupertinoActivityIndicator(),
              ),
            ));
    print(response.body);
    var jsonResponse = json.decode(response.body);
    if (response.statusCode == 200 && jsonResponse['success'] == true) {
      Navigator.pushReplacement(
          context, MaterialPageRoute(builder: (context) => LoginPage()));
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text("تم انشاء حسابك بنجاح".tr())));
   //   Navigator.push(context, MaterialPageRoute(builder:(context)=> LoginPage()));
    } else {
      print(jsonResponse['message']['phone'].toString());
      ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(jsonResponse['message'])));
    }
  }

  static Future<dynamic> BussniseAppointment(
    BuildContext context,
  ) async {
    String _token = await SharedPreferences.getInstance()
        .then((value) => value.getString('token') ?? '');
    http.Response response = await http.post(
      Uri.parse(ApiLinks.busineesAppointments),
      body: json.encode({}),
      headers: {
        "Content-Type": "application/json",
        'Accept': 'application/json',
        'Authorization': 'Bearer $_token',
      },
    );

    if (response.statusCode == 200) {
      var jsonResponse = json.decode(response.body);
      // ScaffoldMessenger.of(context)
      //     .showSnackBar(SnackBar(content: Text(" ${jsonResponse['message']}")));
      return jsonResponse;
    } else {}
  }

  Future<dynamic> fetchAllBusinesses(BuildContext context) async {
    //  List<DataFetchAllBusinessesModel> items = [];
    SharedPreferences preferences = await SharedPreferences.getInstance();
    String _token = preferences.getString('token') ?? '';
    http.Response response =
        await http.get(Uri.parse(ApiLinks.busineesGet), headers: {
      "Content-Type": "application/json",
      'Accept': 'application/json',
      'Authorization': 'Bearer $_token',
    });
    if (response.statusCode == 200) {
      Map<String, dynamic> data = json.decode(response.body);
      // FetchAllBusinessesModel model = FetchAllBusinessesModel.fromJson(data);
      //  items = model.data!;
      return;
    } else {
      // showDialog(
      //     context: context,
      //     builder: (context) => CupertinoAlertDialog(
      //           content: Text('حدث خطا ما'),
      //         ));
      return;
    }
  }

  static Future<List<Autogenerated>> bussniseFetchAll(
      BuildContext context, dynamic categoryUid) async {
    String _token = await SharedPreferences.getInstance()
        .then((value) => value.getString('token') ?? '');

    http.Response response = await http
        .get(Uri.parse(ApiLinks.busineesIndex + categoryUid), headers: {
      "Content-Type": "application/json",
      'Accept': 'application/json',
      'Authorization': 'Bearer $_token',
    });
    List<Autogenerated> list = [];
    if (response.statusCode == 200) {
      var decodeData = json.decode(response.body);
      for (var i in decodeData['data']) {
        list.add(Autogenerated.fromJson(i));
      }
      return list;
    } else {
      // ScaffoldMessenger.of(context).showSnackBar(SnackBar(
      //     content: Text('حدث خطا ما')));
      return list;
    }
  }

  static logout(BuildContext context) async {
    SharedPreferences preferences = await SharedPreferences.getInstance();
    SharedPreferences pref = await SharedPreferences.getInstance();
    await pref.remove('bussnisse_id');
    preferences.clear();
    navigatorOff(context, const LoginPage());
  }

  // static sendSMS({required String phoneNumber, code}) {
  //   TwilioFlutter twilio = TwilioFlutter(
  //       accountSid: 'ACf8250c669d4270b27b45af8f940c0394',
  //       // replace *** with Account SID
  //       authToken: '6bda4370969cbabea75cdfc61aae5da4',
  //       // replace xxx with Auth Token
  //       twilioNumber: '+19362593318' // replace .... with Twilio Number
  //       );
  //   //twilioFlutter.sendSMS(toNumber: '+201090039634', messageBody: 'hello');
  //   twilio.sendSMS(toNumber: phoneNumber, messageBody: code);
  // }

  // static List<Pages> listPage(bool? data) {
  //
  //  // data == true ? list.removeAt(3) : null;
  //   return list;
  // }

  static MaterialColor myColor = const MaterialColor(0xff808080, <int, Color>{
    50: Color(0xff808080),
    100: Color(0xff808080),
    200: Color(0xff808080),
    300: Color(0xff808080),
    400: Color(0xff808080),
    500: Color(0xff808080),
    600: Color(0xff808080),
    700: Color(0xff808080),
    800: Color(0xff808080),
    900: Color(0xff808080)
  });

  static navigatorGo(BuildContext context, Widget route) =>
      Navigator.push(context, MaterialPageRoute(builder: (context) => route));

  void selectTime(BuildContext context) async {
    final TimeOfDay? timeOfDay = await showTimePicker(
      context: context,
      initialTime: selectedTime,
    );
    if (timeOfDay != null && timeOfDay != selectedTime) {
      selectedTime = timeOfDay;
    }
  }

  static navigatorOff(BuildContext context, Widget route) {
    Navigator.pushReplacement(
        context, MaterialPageRoute(builder: (context) => route));
    // Controller.setPage(index: 0, setState: null);
  }
}
