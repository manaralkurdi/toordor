import 'dart:math' as math;
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:localize_and_translate/localize_and_translate.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:sizer/sizer.dart';
import 'package:toordor/controller/controller.dart';
import 'package:toordor/model/category_model.dart';
import 'package:toordor/view/screen/home_page.dart';
import 'package:toordor/view/widget/TextForm.dart';
import 'package:toordor/view/screen/calender.dart';
import '../../model/Autogenerated.dart';
import 'calender_event.dart';

class HomeBody1 extends StatefulWidget {
  dynamic categoryId;

  HomeBody1(this.categoryId);

  @override
  State<HomeBody1> createState() => _HomeBody1State();
}

extension NumExtensions on num {
  bool get isInt => (this % 1) == 0;
}

class _HomeBody1State extends State<HomeBody1> {
  Controller controller = Controller();
  late int pageCount;
  int selectedIndex = 0;
  late PageController pageController =  PageController();
  bool indicator = false;
  Future<SharedPreferences> preferences = SharedPreferences.getInstance();
  Future<List<Autogenerated>> cashing(context)=>Controller.bussniseFetchAll(
      context, widget.categoryId.toString());
  late int lastPageItemLength;
  int indexPage = 0;
  int perPageItem = 6;
  late int bussniseid ;
  List photo =[
    "tadrebalphonon.jpg",
    "tadrebalphonon.jpg",
    "tadrebalphonon.jpg",
    "tadrebalphonon.jpg", "tadrebalphonon.jpg", "tadrebalphonon.jpg", "tadrebalphonon.jpg", "tadrebalphonon.jpg",
    "tadrebalphonon.jpg",
    "tadrebalphonon.jpg",
    "tadrebalphonon.jpg",
    "tadrebalphonon.jpg",
    "tadrebalphonon.jpg",
    "tadrebalphonon.jpg", "tadrebalphonon.jpg", "tadrebalphonon.jpg", "tadrebalphonon.jpg",
    "tadrebalphonon.jpg",
    "tadrebalphonon.jpg", "tadrebalphonon.jpg", "tadrebalphonon.jpg",
    "tadrebalphonon.jpg", "tadrebalphonon.jpg", "tadrebalphonon.jpg",

  ];


  List category =[
    "صالون حلاقة رجالي ",
  "صالونات تجميل",
  "كوافير نسائي",
   "تصميم اظافر",
  "تعليم القيادة",
  "غسيل سيارات "
   "مدرس خاص"
  "صالات رسم الوشم ",
  "مدرب شخصي ",
  "علاج واستشارة طبية",
  "تصوير",
  "مدرب حيوانات",
  "مدرب سباحة",
  "تدريب الفنون",
  "كراجات وتصليح",
  "مدقق حسابات",
  "محامين",
  "ميادين الرماية",
  "عرافة",
  "علاج طبيعي/ فيزوترابيا",
  "منتجع صحي وتدليك",
  "طباعة الوشم",
  "مستشار",
  "وسيط/وكيل",
  "طبيب بيطري",
  "مطاحن",
  "مجالس محلية",
  "معاصر الزيتون",
  "طبيب اسنان",
"طبيب امراض البشرة ",
  "طبيب عيون",
  "قاعات المناسبات والأفراح "
  ];
  bool isLoading = false;
  final Connectivity _connectivity = Connectivity();
  Future<void> initConnectivity() async {
    late ConnectivityResult result;
    try {
      result = await _connectivity.checkConnectivity();
    } on PlatformException catch (e) {
      print("Error Occurred: ${e.toString()} ");
      return;
    }
    if (!mounted) {
      return Future.value(null);
    }
    return _UpdateConnectionState(result);
  }

  void showStatus(ConnectivityResult result, bool status) {
    final snackBar = SnackBar(
        content:
        Text("${status ? 'ONLINE\n' : 'OFFLINE\n'}${result.toString()} "),
        backgroundColor: status ? Colors.green : Colors.red);
    ScaffoldMessenger.of(context).showSnackBar(snackBar);
  }

  Future<void> _UpdateConnectionState(ConnectivityResult result) async {
    if (result == ConnectivityResult.mobile ||
        result == ConnectivityResult.wifi) {
      setState(() {
        isLoading = false;
        //     showStatus(result, true);
      });
    } else {
      setState(() {
        //  showStatus(result, false);
        isLoading = true;
      });
    }
  }
  @override
  void initState() {
    // TODO: implement initState
    super.initState();
    // if(pageCount!=null){
    //   setState(() =>indicator==true);
    // }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar:AppBar2(context:context),
      body: FutureBuilder<dynamic>(
        future: Controller.userData(context),
        builder: (context,snapshot) {
          bussniseid=snapshot.data?['message']['bussinees_id']??0;
          print(bussniseid);
          return Column(
            children: [
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.start,
                    children: [
                      FutureBuilder<SharedPreferences>(
                        future: SharedPreferences.getInstance(),
                        builder: (context, snapshot) {
                          if (snapshot.hasData) {
                            return Container(
                              padding: const EdgeInsets.only(top: 20, right: 10),
                              child: Row(
                                children: [
                                  Text("مرحبا".tr()),
                                  Text(
                                    "${snapshot.data!.getString('fullname')}",
                                    style: TextStyle(
                                      fontSize: 15.sp,
                                    ),
                                  ),
                                ],
                              ),
                            );
                          } else {
                            return const CupertinoActivityIndicator();
                          }
                        },
                      )
                    ],
                  ),
                  Padding(
                    padding: const EdgeInsets.only(bottom: 8.0, right: 8),
                    child: Row(
                      children: [
                        ElevatedButton(
                          style: ElevatedButton.styleFrom(primary: Colors.blue),
                          onPressed: () =>
                              Controller.navigatorGo(context, Calender()),
                          child: Text(
                            "مواعيدي".tr(),
                            style: TextStyle(
                              fontSize: 12.sp,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                  Padding(
                    padding:  EdgeInsets.only(right: 8, top: 12),
                    child: Text(
                   "اختيار الخدمة".tr(),
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ],
              ),
              Expanded(
                child: FutureBuilder<List<Autogenerated>>(
                    future: cashing(context),
                    builder: (context, snapshot) {
                      print(widget.categoryId);
                      if (snapshot.connectionState == ConnectionState.none) {
                        return  Center(
                            child: Text('لا يتوافر اتصال بالانترنت'.tr()));
                      } else if (snapshot.hasData) {
                        var num = (snapshot.data!.length / perPageItem);
                        pageCount = num.isInt ? num.toInt() : num.toInt() + 1;

                        late int reminder = snapshot.data!.length.remainder(perPageItem);
                        lastPageItemLength = reminder == 0 ? perPageItem : reminder;
                        return PageView.builder(
                            controller: pageController,
                            itemCount:pageCount,
                            onPageChanged: (index) {
                              setState(() {
                                selectedIndex = index;
                              });
                            },
                            itemBuilder: (_, pageIndex) {
                              return GridView.count(
                                physics: const NeverScrollableScrollPhysics(),
                                padding: const EdgeInsets.fromLTRB(16, 16, 16, 0),
                                primary: false,
                                childAspectRatio: 1.1,
                                shrinkWrap: true,
                                crossAxisSpacing: 0,
                                mainAxisSpacing: 0,
                                crossAxisCount: 3,
                                children: List.generate(
                                    (pageCount - 1) != pageIndex
                                        ? perPageItem
                                        : lastPageItemLength, (index) {
                                  return Column(
                                    children: [
                                      GestureDetector(
                                        onTap: () { Controller.navigatorGo(
                                          context,
                                          //
                                          CalendarEvent(
                                              snapshot.data?[index+(pageIndex * perPageItem)]?.id??0,

                                          )
                                  );
                                          print("bussmiseid");
                                          print( snapshot.data?[index+(pageIndex * perPageItem)]?.id);

                                          },
                                        child: Container(
                                          width: 50,
                                          height: 50,
                                          decoration:  BoxDecoration(
                                            borderRadius: BorderRadius.circular(10),
                                            image: DecorationImage(
                                              image: AssetImage
                                                ('assets/1f3b82a8-489f-4051-9605-90fc99c2010a-removebg-preview.png')
                                            )
                                          ),
                                          margin: const EdgeInsets.all(5),
                                          padding: const EdgeInsets.all(9),
                                          alignment: Alignment.topCenter,
                                        ),
                                      ),
                                      Text(
                                        snapshot.data?[index + (pageIndex * perPageItem)]
                                               .businessName ??'',
                                        style: const TextStyle(
                                            color: Colors.black, fontSize: 12),
                                        overflow: TextOverflow.ellipsis,
                                        textAlign: TextAlign.center,
                                      ),
                                    ],
                                  );
                                }),
                              );
                            });
                      } else {
                        return const Center(child: CircularProgressIndicator());
                      }
                    }),
              ),
              SizedBox(
                height: 15.sp,
                child: ListView.builder(
                  shrinkWrap: true,
                  scrollDirection: Axis.horizontal,
                  itemCount:4 ,
                  itemBuilder: (_, index) {
                    return GestureDetector(
                      onTap: () => pageController.animateToPage(index,
                          duration: const Duration(milliseconds: 500),
                          curve: Curves.easeInOut),
                      child: AnimatedContainer(
                        duration: const Duration(milliseconds: 100),
                        decoration: BoxDecoration(
                            borderRadius:
                                const BorderRadius.all(Radius.circular(10)),
                            color: Colors.red
                                .withOpacity(selectedIndex == index ? 1 : 0.5)),
                        margin: const EdgeInsets.all(5),
                        width: 10,
                        height: 10,
                      ),
                    );
                  },
                ),
              ),
             const Expanded(child:  SizedBox())
            ],
          );
        }
      ),
    );
    // return Scaffold(
    //   body: Column(
    //     children: [
    //       Expanded(
    //           flex: 4,
    //           child: Column(
    //             children: [
    //               Row(
    //                 mainAxisAlignment: MainAxisAlignment.start,
    //                 children: [
    //                   FutureBuilder<SharedPreferences>(
    //                     future: SharedPreferences.getInstance(),
    //                     builder: (context, snapshot) {
    //                       if (snapshot.hasData) {
    //                         return Container(
    //                           padding: const EdgeInsets.only(top: 20),
    //                           child: Text(
    //                             "مرحبا ${snapshot.data!.getString('fullname')}",
    //                             style: TextStyle(fontSize: 15.sp),
    //                           ),
    //                         );
    //                       } else {
    //                         return const CupertinoActivityIndicator();
    //                       }
    //                     },
    //                   )
    //                 ],
    //               ),
    //               Padding(
    //                 padding: const EdgeInsets.only(bottom: 8.0),
    //                 child: Row(
    //                   children: [
    //                     ElevatedButton(
    //                       onPressed: () =>
    //                           Controller.navigatorGo(context, Calendar()),
    //                       child: Text(
    //                         "مواعيدي",
    //                         style: TextStyle(fontSize: 12.sp),
    //                       ),
    //                     ),
    //                   ],
    //                 ),
    //               ),
    //             ],
    //           )),
    //       Expanded(
    //           flex: 16,
    //           child: Container(
    //             color: Colors.grey.shade50,
    //             child: RefreshIndicator(
    //               onRefresh: () async => setState(() =>cashing),
    //               child: FutureBuilder(
    //                 future: cashing,
    //                 builder: (context, snapshot) {
    //                   if (snapshot.connectionState == ConnectionState.waiting) {
    //                     return const Center(
    //                         child: CupertinoActivityIndicator());
    //                   }
    //                   if (snapshot.hasData == false) {
    //                     return const Center(child: Text('لا توجد بينات'));
    //                   } else {
    //                     int perPageItem = 9;
    //
    //                     late int lastPageItemLength;
    //
    //                     pageController = PageController(initialPage: 0);
    //                     var num = (snapshot.data!.length / perPageItem);
    //                     pageCount = num.isInt ? num.toInt() : num.toInt() + 1;
    //
    //                     var reminder =
    //                         snapshot.data!.length.remainder(perPageItem);
    //                     lastPageItemLength =
    //                         reminder == 0 ? perPageItem : reminder;
    //
    //                     return Column(
    //                       children: [
    //                         Expanded(
    //                           flex: 22,
    //                           child: PageView.builder(
    //                             controller: pageController,
    //                             itemCount: pageCount,
    //                             onPageChanged: (index) =>
    //                                 setState(() => selectedIndex = index),
    //                             itemBuilder: (_, pageIndex) {
    //                               return GridView.count(
    //                                 physics:
    //                                     const NeverScrollableScrollPhysics(),
    //                                 padding: const EdgeInsets.fromLTRB(
    //                                     16, 16, 16, 0),
    //                                 primary: false,
    //                                 childAspectRatio: 1.1,
    //                                 shrinkWrap: true,
    //                                 crossAxisSpacing: 0,
    //                                 mainAxisSpacing: 0,
    //                                 crossAxisCount: 3,
    //                                 children: List.generate(
    //                                     (pageCount - 1) != pageIndex
    //                                         ? perPageItem
    //                                         : lastPageItemLength, (index) {
    //                                   return GestureDetector(
    //                                     onTap: () => Controller.navigatorGo(
    //                                         context, Calendar()),
    //                                     child: ClipRRect(
    //                                       borderRadius:
    //                                           BorderRadius.circular(12),
    //                                       child: Container(
    //                                           width: 50,
    //                                           height: 50,
    //                                           margin: const EdgeInsets.all(12),
    //                                           alignment: Alignment.bottomCenter,
    //                                           decoration: BoxDecoration(
    //                                               borderRadius:
    //                                                   BorderRadius.circular(8),
    //                                               color: Color((math.Random()
    //                                                               .nextDouble() *
    //                                                           0xFFFFFF)
    //                                                       .toInt())
    //                                                   .withOpacity(1),
    //                                               image: DecorationImage(
    //                                                   image: NetworkImage(
    //                                                       snapshot.data?[index]
    //                                                               .logoPNG ??
    //                                                           ''))),
    //                                           child: Text(snapshot.data?[index].bFullName ?? '')),
    //                                     ),
    //                                   );
    //                                 }),
    //                               );
    //                             },
    //                           ),
    //                         ),
    //                         Expanded(
    //                           flex: 1,
    //                           child: ListView.builder(
    //                             shrinkWrap: true,
    //                             scrollDirection: Axis.horizontal,
    //                             itemCount: pageCount,
    //                             itemBuilder: (_, index) {
    //                               return GestureDetector(
    //                                   onTap: () {
    //                                     pageController.animateToPage(index,
    //                                         duration: const Duration(
    //                                             milliseconds: 500),
    //                                         curve: Curves.easeInOut);
    //                                   },
    //                                   child: AnimatedContainer(
    //                                     duration:
    //                                         const Duration(milliseconds: 100),
    //                                     decoration: BoxDecoration(
    //                                         borderRadius:
    //                                             const BorderRadius.all(
    //                                                 Radius.circular(10)),
    //                                         color: Colors.red.withOpacity(
    //                                             selectedIndex == index
    //                                                 ? 1
    //                                                 : 0.5)),
    //                                     margin: const EdgeInsets.all(5),
    //                                     width: 10,
    //                                     height: 10,
    //                                   ));
    //                             },
    //                           ),
    //                         )
    //                       ],
    //                     );
    //                   }
    //                 },
    //               ),
    //             ),
    //           )),
    //       const Expanded(
    //         flex: 7,
    //         child: Text(
    //           'ads',
    //           style: TextStyle(fontSize: 90),
    //         ),
    //       ),
    //     ],
    //   ),
    // );
  }
}
